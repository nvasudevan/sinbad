#! /usr/bin/env python

# Copyright (c) 2012 King's College London
# created by Laurence Tratt and Naveneetha Vasudevan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.


import time, getopt, os, sys
import Accent, Backends, CFG, Lexer
import tempfile
import Minimisers, AmbiParse, MiniUtils


class Sinbad:

    def __init__(self):
        opts, args = getopt.getopt(sys.argv[1:], "hb:d:w:r:m:x:n:t:j:X:T:vs")
        self.backend = None
        self.t_depth = None
        self.wgt = None
        self.minp = None
        self.mincnt = None
        self.mint = None
        self.save_min_cfg = False
        self.td = None
        self.verify = False
        self.ambijarp = None
        self.jvmheap = None
        for opt in opts:
            if opt[0] == "-b":
                if opt[1] not in Backends.BACKENDS:
                    self.usage("Unknown backend '%s'." % opt[1])
                self.backend = opt[1]
            elif opt[0] == "-d":
                self.t_depth = int(opt[1])  
            elif opt[0] == "-w":
                self.wgt = float(opt[1])             
            elif opt[0] == "-r":
                sys.setrecursionlimit(int(opt[1]))
            elif opt[0] == "-m":
                self.minp = opt[1]
            elif opt[0] == "-x":
                self.td = opt[1]
            elif opt[0] == "-n":
                self.mincnt = int(opt[1])
            elif opt[0] == "-t":
                self.mint = int(opt[1])
            elif opt[0] == "-v":
                self.verify = True
            elif opt[0] == "-s":
                self.save_min_cfg = True
            elif opt[0] == "-j":
                self.ambijarp = opt[1]
            elif opt[0] == "-X":
                self.jvmheap = opt[1]
            elif opt[0] == "-T":
                self.ambit = int(opt[1])
            elif opt[0] == "-h":
                self.usage()
            else:
                self.usage("Unknown argument '%s'" % opt[0])

        if self.backend is None:
            self.usage("** No backend specified. **")

        if len(args) == 0:
            self.usage("** Not enough arguments. **")

        # dynamic backends require threshold depth
        if self.backend != 'purerandom' and self.t_depth is None:
            self.usage("Specify threshold depth (-d N) to favour alternatives.")

        if self.minp == 'min1' and self.mincnt is None:
            self.usage("** Min1 requires no of iterations (-n N) **\n")

        if self.minp in ['min2', 'min3'] and self.mint is None:
            self.usage("** Min2 requires a time duration (-t N seconds) **\n")

        if self.minp in ['min4']:
            if self.ambijarp is None:
                self.usage("** path to ambidexter jar? **\n")

            if self.jvmheap is None:
                self.usage("** heap size? for running ambidexter **\n")

            if self.ambit is None:
                self.usage("*** duration to run ambidexter for? **\n")

        self.gp, self.lp = args[0], args[1]
        self.check_file(self.gp)
        self.check_file(self.lp)
        amb, sen, ptrees = self.find_ambiguity(self.gp, self.lp, self.backend)

        if self.minp is not None:
            assert amb
            self.run_minimiser(ptrees)


    def usage(self, msg = None):
        if msg is not None:
            sys.stderr.write(msg + "\n\n")

            sys.stderr.write("sinbad <backend options> <minimiser options> "
            "<grammar> <lexer>" \
            "\n\nOptions for backend: " \
            "\n-b <backend> \n-d <threshold depth> "
            "\n-w <weight to apply to unpick favoured alternatives> " \
            "\n\nOptions for minimiser: " \
            "\n-m <minimiser to run> " \
            "\n-s (save minimised grammar) " \
            "\n-t <minimisation duration in secs> " \
            "\n-n <no of iterations for minimising> " \
            "\n-j <absolute path to ambidexter jar> " \
            "\n-X <JVM heap size for ambidexter>\n" \
            "\n-T <duration to run ambidexter for>\n")

            sys.exit(1)


    def check_file(self, p):
        if not os.path.isfile(p):
            sys.stderr.write("Can not read in %s\n" % p)
            sys.exit(1)


    def find_ambiguity(self, gp, lp, bend_name, duration=None):
        print "===> %s : %s" % (gp, bend_name)
        self.lex = Lexer.parse(open(lp, "r").read())
        self.cfg = CFG.parse(self.lex, open(gp, "r").read())
        t0 = time.time()
        self.parser = Accent.compile(gp, lp)
        t1 = time.time()
        print "accent compile time (secs): %.6f" % (t1-t0) 
        bend = Backends.BACKENDS[bend_name](self)
        return bend.run(self.t_depth, self.wgt, duration)


    def run_minimiser(self, ptrees):
        # we use td as the temporary workding dir for minimised
        # grammars
        if self.td is None:
            self.td = tempfile.mkdtemp()

        if not os.path.exists(self.td):
            os.mkdir(self.td)

        # save the minimised cfg, lex to target files
        self.ambi_parse = AmbiParse.parse(self, ptrees)
        self.mingp = os.path.join(self.td, "%s.acc" % 0)
        self.minlp = os.path.join(self.td, "%s.lex" % 0)
        print "mingp: %s" % self.mingp
        print "minlp: %s" % self.minlp
        MiniUtils.write_cfg_lex(self.ambi_parse.min_cfg, self.mingp,
                                self.lp, self.minlp)

        m = Minimisers.MINIMISERS[self.minp](self)
        m.minimise()


Sinbad()
