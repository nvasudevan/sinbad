================================================================================
 Brief backends description
================================================================================

Purerandom
  Builds up a string by randomly walking the input CFG and taking random
  choices at all opportunities.
    + Simple
    - Runs out of stack space on any non-trivial example.


Random2 [builds on Random1]
  When a given rule has been called "enough" times in a given path down the
  tree, prefer sequences which contain only terminals (on the basis that this
  will stop the tree getting too much bigger).
    + Fairly simple
    - Runs out of stack space on most non-trivial examples.


Random3 [builds on Random2]
  Rules are statically calculated as being of "finite depth" or not. Finite
  depth means that all the rules sequences contain only a) terminals b)
  references to other rules which are finite depth.
    - Most CFGs seem to have few rules which are of finite depth, so it
      still tends to run out of stack space on most non-trivial examples.


Random4 [builds on Random3]
  Rather than classifying whole rules as being of "finite depth" or not, do
  so on a per-sequence basis.
    ~ Doesn't seem to be much of a difference re: Random3.


Dynamic1 [builds, more or less, on Random2]
  When the current stack depth of called rules is "enough", pick low-scoring
  sequences. Scores range from 0 to +ve. All rules have a count of how many
  times they have been entered and exited (entered >= exited; if entered ==
  exited, then the rule in question is not on the current stack). Terminals
  score 0; non-terms where entered = 0 score 0 (an attempt to increase
  diversity); otherwise non-terms score (1 - exited * 1.0/ entered). One of the
  lowest scoring sequences is then randomly chosen.
    + Runs on a wider range of examples.
    ~ Very sensitive to when the call stack depth is "enough"
    - Runs out of stack on few examples.

Dynamic2 [builds, more or less, on Dynamic1]
  Generate a dict, which for each non-term, will map to a sequence that will 
  terminate the quickest.   
    + We apply the above mapping when we have reached a certain threshold depth.

Dynamic3 [based on Dynamic1]
  Whereas in Dynamic1 we used a cumulative score to favour an alternative, in Dynamic3 
  we identify and use the max score associated with one of the non-terminals for an 
  alternative

WEIGHTED BACKENDS
=================

Dynamic4 [builds on Dynamic3]
  Uses a weight to favour an alternative based on Roulette Wheel Selection (RWS)
  To favour an Randomly select a number in [0,1). 
  If number < wgt, use RWS on the scores, else follow Dynamic3
  ** Dynamic4 = Dynamic3 + roulette(scores) **

Dynamic6 [builds on  Dynamic3]
  Approach is same as Dynamic5 but the deterministic part to favour alternatives is
  slightly different: whereas in case of Dynamic5, we had only one sequence to choose 
  from, in case of Dynamic6, where possible, we may have multiple sequences.
  ** Dynamic6 = Dynamic3 + Dynamic2 (pick one of the terminating path randomly) **

Dynamic7 [builds on Dynamic1]
  Uses a weight to favour an alternative based on Roulette Wheel Selection (RWS)
  To favour an Randomly select a number in [0,1). 
  If number < wgt, use RWS, else follow Dynamic1
  ** Dynamic7 = Dynamic1 + roulette(scores) **
   
Dynamic11 [builds on Dynamic3]
  Use scoring mechanism, to favour alternatives
  Calculate which sequences are of finite depth during sentence generation
  When weight is applied, use seqs with finite depth
  ** Dynamic11 = Dynamic3 + finite depth seq found during sentence generatio **

** EXPERIMENTAL BACKENDS **
===========================

Dynamic5 [builds on Dynamic3]
  Uses a weight to favour an alternative based on the deterministic approach used
  in Dynamic2: for each rule, we know exactly which sequence to choose that guarantees
  termination.
  If number < wgt, use deterministic approach to select sequence, otherwise use Dynamic3
  ** Dynamic5 = Dynamic3 + Dynamic2 **

Dynamic8 [builds on Dynamic3]
  Uses a weight to favour an alternative based on rank based roulette wheel selection
  To favour an Randomly select a number in [0,1).
  If number < wgt, rank the scores, and then use roulette wheel selection on the ranked 
  scores
  ** Dynamic8 = Dynamic3 + rank based roulette(scores) **

Dynamic9 [builds on Dynamic3]
  Uses a weight to favour an alternative based on average scores
  To favour, randomly select a number in [0,1).
  If < wgt, calculate average scores (score/seq.entered), and then use 
  roulette wheel selection on the average scores
  For > wgt, use Dynamic3

Dynamic10 [builds on Dynamic9]
  Instead of calculating average scores, we use a inverse score (1/seq.entered).
  The idea is to select those alternatives that have been used less.
  To favour, randomly select a number in [0,1).
  If < wgt, calculate inverse scores (1/seq.entered), and then use 
  roulette wheel selection on the inverse scores
  For > wgt, use Dynamic3

Dynamic12 [builds on Dynamic11]
  One difference to Dynamic11: the part which calculates alternatives
  with finite depth is reset for every sentence.
