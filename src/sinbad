#! /usr/bin/env python

# Copyright (c) 2012 King's College London
# created by Laurence Tratt and Naveneetha Vasudevan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.


import datetime, getopt, os, sys
import Accent, Backends, CFG, Lexer, UniformGrammarDistributor



class Sinbad:

    def __init__(self):
        opts, args = getopt.getopt(sys.argv[1 : ], "hb:t:d:")
        backends = []
        self.duration, self.t_depth = None, None
        for opt in opts:
            if opt[0] == "-b":
                if opt[1] in backends:
                    self.usage("Backend '%s' specified more than once." % opt[1])
                if opt[1] not in Backends.BACKENDS:
                    self.usage("Unknown backend '%s'." % opt[1])
                backends.append(opt[1])
            elif opt[0] == "-t":
                self.duration = int(opt[1])                
            elif opt[0] == "-d":
                self.t_depth = int(opt[1])               
            elif opt[0] == "-h":
                self.usage()
            else:
                self.usage("Unknown argument '%s'" % opt[0])

        if len(backends) == 0:
            self.usage("No backend specified.")
        if self.duration == None:
        	self.usage("Specify the duration (-t N) of search.")
    	if self.t_depth == None:
    		self.usage("Specify the threshold depth (-d N) to favour an alternative.")
        if len(args) == 0:
            self.usage("Not enough arguments.")
        if len(args) % 2 != 0:
            self.usage("Some grammars are missing lexers.")

        i = 0
        while i < len(args):
            self.check_file(args[i])
            self.check_file(args[i + 1])
            for backend in backends:
                if self.find_ambiguity(args[i], args[i + 1], backend):
                    break
            i += 2


    def usage(self, msg = None):
	    if msg is not None:
		    sys.stderr.write(msg + "\n\n")

	    sys.stderr.write("sinbad -t <time in seconds> " 
	      "-d <threshold depth> -b <backend 1> [... -b " \
          "<backend n>] <grammar 1> <lexer 1> " \
          "[... <grammar n> <lexer n>]\n")
	    sys.exit(1)


    def check_file(self, p):
        if not os.path.isfile(p):
            sys.stderr.write("Can not read in %s\n" % p)
            sys.exit(1)


    def find_ambiguity(self, gp, lp, bend_name):
        sys.setrecursionlimit(500)
        print "===> %s : %s" % (gp, bend_name)
        self.lex = Lexer.parse(open(lp, "r").read())
        self.cfg = CFG.parse(self.lex, open(gp, "r").read())
        self.parser = Accent.compile(gp, lp)
        bend = Backends.BACKENDS[bend_name](self)
        return bend.run(self.t_depth)


    def start_timer(self):
        return datetime.datetime.now()


    def timer_elapsed(self, t):
        return not (t + datetime.timedelta(seconds=self.duration) > datetime.datetime.now())



Sinbad()
