#! /usr/bin/env python

# Copyright (c) 2012 King's College London
# created by Laurence Tratt and Naveneetha Vasudevan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.


import time, optparse, os, sys
import Accent, Backends, CFG, Lexer
import Minimisers, AmbiParse
import tempfile


class Sinbad:

    def __init__(self):
        cli_opt_parser = self.process_input()
        opts, args = cli_opt_parser.parse_args()
        # do some quick validation on the input
        msg, valid = self.validate_input(opts, args)
        if not valid:
            sys.stderr.write("** %s **\n\n" % msg)
            cli_opt_parser.print_help()
            sys.exit(1)

        self.backend = opts.backend
        self.t_depth = opts.depth
        self.wgt = opts.wgt
        self.minp = opts.minp
        self.mincnt = opts.mincnt
        self.mint = opts.mint
        self.save_min_cfg = opts.save_min_cfg
        self.td = opts.tempdir
        self.ambijarp = opts.ambijarp
        self.jvmheap = opts.jvmheap
        self.ambit = opts.ambi_time
        self.verify = True
        self.cfg_parser = opts.cfg_parser

        # run the ambiguity program
        self.gp, self.lp = args[0], args[1]
        self.check_file(self.gp)
        self.check_file(self.lp)

        # check if lex has a symbol for whitespace
        self.lex_ws = False
        _lex = Lexer.parse(open(self.lp, 'r').read())
        if 'WS' in _lex:
            self.lex_ws = True

        amb, sen, ptrees = self.find_ambiguity(self.gp, self.lp, self.backend)
        if self.minp is not None:
            assert amb
            self.run_minimiser(ptrees)


    def process_input(self):
        opt_parser = optparse.OptionParser(usage="Usage: %prog <options>" + \
            " <grammar> <lex>")
        bendgroup = optparse.OptionGroup(opt_parser, 'Backend Options:')
        bendgroup.add_option('-b', dest='backend', metavar='<backend>',\
            help='which backend to run?')
        bendgroup.add_option('-d', dest='depth', type='int', \
            metavar='<N>', help='threshold depth')
        bendgroup.add_option('-w', dest='wgt', type='float', metavar='<wgt>', \
            help='apply weight (0.0 < W < 1.0) to unpick favoured alternatives')
        bendgroup.add_option('-p', dest='cfg_parser', metavar='<parser path>', \
            default=None, help='absolute path to the grammar parser')
        opt_parser.add_option_group(bendgroup)

        # for minimiser
        mingroup = optparse.OptionGroup(opt_parser, 'Minimiser Options:')
        minims=['min1', 'min2', 'min3', 'min4']
        minims_s = "<" + "|".join(m for m in minims) + ">"
        mingroup.add_option('-m', dest='minp', type='choice', \
            metavar='<minimiser>', choices=minims, help="which minimiser? %s" % minims_s)
        mingroup.add_option('-n', dest='mincnt', type='int', metavar='<N>', \
            help='number of minimisations to apply (min1)')

        # min2, min3
        mingroup.add_option('-t', dest='mint', type='int', metavar='<time>', \
            help='duration (in secs) to apply minimisation for? (min2, min3)')

        # min4
        mingroup.add_option('-j', dest='ambijarp', default=None, \
            metavar='<jar path>', help='path to the ambidexter jar (min4)')
        mingroup.add_option('-X', dest='jvmheap', metavar='<heap>', \
             default='1g', help='JVM heap for running ambidexter. Default: 1g')
        mingroup.add_option('-T', dest='ambi_time', default=None, \
            metavar='<time>', help='duration (in secs) to run ambidexter for')

        # others
        mingroup.add_option('-x', dest='tempdir', default=None, \
            metavar='<temp dir>', help='temporary directory to use')
        mingroup.add_option('-s', dest='save_min_cfg', default=False, \
            action='store_true', help='save the minimised grammar')
        opt_parser.add_option_group(mingroup)

        return opt_parser


    def validate_input(self, opts, args):
        msg = ""
        if len(args) < 2:
            msg = "Not enough arguments."
            return msg, False

        backends = Backends.BACKENDS.keys() + Backends.WGTBACKENDS.keys()
        if opts.backend not in backends:
            msg = "Unknown backend '%s'." % opts.backend
            return msg, False

        if opts.backend != 'purerandom' and opts.depth is None:
            msg = "Threshold depth is not set."
            return msg, False

        if opts.backend in Backends.WGTBACKENDS and opts.wgt is None:
            msg = "Backend (%s) require weight (-w 0.x)." % opts.backend
            return msg, False

        if opts.minp in ['min1', 'min4'] and opts.mincnt is None:
            msg = "Min1|Min4 requires no (-n N) of iterations."
            return msg, False

        if opts.minp in ['min2', 'min3'] and opts.mint is None:
            msg = "Min2|Min3 require duration (-t) to run minimisation for?"
            return msg, False

        if opts.minp in ['min4']:
            if opts.ambijarp is None:
                msg = "Path (-j) to ambidexter jar is not set."
                return msg, False

            if opts.jvmheap is None:
                msg = "Heap size (-X) for ambidexter is not set."
                return msg, False

            if opts.ambi_time is None:
                msg = "Duration (-T) to run ambidexter is not set."
                return msg, False

        return msg, True


    def check_file(self, p):
        if not os.path.isfile(p):
            sys.stderr.write("Can not read in %s\n" % p)
            sys.exit(1)


    def find_ambiguity(self, gp, lp, bend_name, duration=None):
        print "===> %s : %s" % (gp, bend_name)
        self.lex = Lexer.parse(open(lp, "r").read())
        self.cfg = CFG.parse(self.lex, open(gp, "r").read())
        if self.cfg_parser is None:
            print "generating parser ..."
            t0 = time.time()
            self.cfg_parser = Accent.compile(gp, lp)
            t1 = time.time()
            print "accent compile time (secs): %.6f" % (t1-t0)

        print "parser => " , self.cfg_parser
        if bend_name in Backends.WGTBACKENDS:
            bend = Backends.WGTBACKENDS[bend_name](self)
            return bend.run(self.t_depth, self.wgt, duration)

        bend = Backends.BACKENDS[bend_name](self)
        return bend.run(self.t_depth, None, duration)


    def run_minimiser(self, ptrees):
        """ Using the initial parse trees, run the minimiser. """
        self.ambi_parse = AmbiParse.parse(self.lp, self.lex_ws, ptrees)
        m = Minimisers.MINIMISERS[self.minp](self)
        m.minimise()



Sinbad()
